
---Checking the datasets

SELECT *
 FROM playstore_apps

SELECT *
 FROM playstore_reviews


--- Q1; Which apps have the highest rating in the given available dataset?

SELECT DISTINCT APPS, MAX(RATING) AS highest_rating
 FROM playstore_apps 
  GROUP BY APPS 
   ORDER BY MAX(RATING) DESC
         /**From the first output seen, the highest rating is 5**/

SELECT DISTINCT APPS, MAX(RATING) AS highest_rating
 FROM playstore_apps
  WHERE RATING ='5'
   GROUP BY APPS 
         /**From the second ouput seen, over 200 APPS have the rating  of 5**/


---	Q2; What are the numbers of installs and reviews for the above apps?
---Return the apps with the highest reviews to the top.

SELECT  APPS, SUM(INSTALLS) as NUM_INSTALLS, MAX(REVIEWS) as HIGHEST_REVIEWS
 FROM playstore_apps
  WHERE rating = '5'
   GROUP BY APPS
    ORDER BY MAX(REVIEWS) DESC
              /**From the output seen, 'Rios de fe' is the app with highest number of reviews**/ 


---Q3; Which app has the highest number of reviews? 
---Also, mention the number of reviews and category of the app

SELECT TOP(1) APPS, CATEGORY, MAX(REVIEWS) AS NUM_REVIEWS
 FROM playstore_apps
  GROUP BY  APPS, CATEGORY
   ORDER BY MAX(REVIEWS) DESC
       /**From the out put Facebook is the app with the highest review**/


---Q4; What is the total amount of revenue generated by the google playstore by hosting apps?
---(Whenever a user buys apps from the google play store, the amount is considered in the revenue)

ALTER TABLE playstore_apps
 ADD REVENUE AS (INSTALLS * PRICE)

 SELECT SUM(REVENUE) AS TOTAL_AMOUNT
  FROM playstore_apps
        /** The total revenue generated by playstore is over $367 million **/


---Q5; Which Category of google playstore apps has the highest number of installs?
--- Also, find out the total number of installs for that particular category. 

SELECT TOP(1) CATEGORY, MAX(INSTALLS) AS HIGHEST_INSTALLS, SUM(INSTALLS) AS TOTAL_INSTALLS
 FROM playstore_apps
  GROUP BY CATEGORY
   ORDER BY SUM(INSTALLS) DESC
       /** There are lots of Category with 1000000000 number of installs but 'GAME' has the highest total of installs**/


---Q6; Which Genre has the most number of published apps?
    
SELECT TOP(1) GENRES, COUNT(APPS) AS MOST_PUBLISHED
 FROM playstore_apps
  GROUP BY GENRES
   ORDER BY COUNT(APPS) DESC

       /** Tools is the genre with the most published apps **/


---Q7; Provide the list of all games ordered in such a way that the game that has the highest number of installs is displayed on the top

SELECT APPS, MAX(INSTALLS) AS HIGHEST_INSTALLS
 FROM playstore_apps
  WHERE CATEGORY='GAME'
   GROUP BY APPS
    ORDER BY MAX(INSTALLS) DESC

	     /** The output shows  the list of all the games ordered **/


---Q8; Provide the list of apps that can work on android version 4.0.3 and up

SELECT APPS
 FROM playstore_apps
  WHERE ANDROID_VER = '4.0.3 and UP'
      /**The out put below shows the list of apps that can work on Android version 4.0.3 and UP**/


---Q9; How many apps from the given dataset are free?

SELECT APPS
 FROM playstore_apps
  WHERE TYPE = 'free'
  GROUP BY APPS    /** 8887 Apps are free **/

---Also, provide the number of paid apps.

SELECT APPS
 FROM playstore_apps
  WHERE TYPE = 'paid'
   GROUP BY  APPS     /**753 Apps are paid **/


---Q10; Which is the best dating app?
---(Best dating app is the one having the highest number of reviews)

 SELECT TOP(1)CATEGORY, APPS, MAX(REVIEWS) AS HIGHEST_REVIEWS
  FROM playstore_apps
   WHERE CATEGORY = 'DATING'
    GROUP BY CATEGORY, APPS
     ORDER BY MAX(REVIEWS) DESC

	     /**"Zoosk Dating App: Meet singles" is the best dating app with 516917 reviews**/


---Q11; Get the number of reviews having positive sentiment 
---and number of reviews having negative sentiment for the app '10 best foods for you' and compare them   

SELECT COUNT(REVIEWS) AS NUMBER_REVIEWS, A.APPS, B.Sentiment
 FROM playstore_apps AS A
  JOIN playstore_reviews  AS B
  ON A.APPS = B.App
   WHERE Sentiment='Positive' and App ='10 Best foods for you'
    GROUP BY A.APPS, B.Sentiment

SELECT COUNT(REVIEWS) AS NUMBER_REVIEWS, A.APPS, B.Sentiment
 FROM playstore_apps AS A
  JOIN playstore_reviews  AS B
   ON A.APPS = B.App
    WHERE Sentiment='Negative' and App ='10 Best foods for you'
     GROUP BY A.APPS, B.Sentiment
              /** From the outputs, the '10 Best foods for you' app has more positive sentiment than negative
			  Therefore, its more likely to be a great app.**/


---Q12; Which comments  of ASUS SuperNote have sentimental poarity
--- and sentimental subjectivity both as 1?

SELECT A.APPS, B.Sentiment_Polarity, B.Sentiment_Subjectivity, B.Translated_Review
 FROM playstore_apps AS A
  JOIN playstore_reviews AS B
  ON A.APPS = B.App
 WHERE A.APPS = 'ASUS SuperNote' and B.Sentiment_Polarity = 1
        
		/** The comments of ASUS SuperNote with sentimental polarity and 
		sentimental subjectivity as 1 is "AWESOME!!!!" **/


	---Q13; Get all the neutral sentiment reviews for the app "Abs Training Burn belly fat"

SELECT Sentiment, App
 FROM playstore_reviews
  WHERE Sentiment = 'Neutral' AND App = 'Abs Training-Burn belly fat'

         /** The total neutral sentiment for the mentioned app above is 5 **/


 ---Q14; Extract all the negative sentiment reviews for "Adobe Acrobat Reader
 --- with their sentiment polarity and sentiment subjectivity

  SELECT  sentiment, App
   FROM playstore_reviews
    WHERE  App = 'Adobe Acrobat Reader' AND Sentiment = 'Negative'

	   /** Only 20  sentimental reviews are negative **/